#!/bin/bash

# Utilities {{{
is_exists() {
  command -v "$1" > /dev/null 2>&1
  return $?
}

ink() {
  local open="\033["
  local close="${open}0m"
  local black="0;30m"
  local red="1;31m"
  local green="1;32m"
  local yellow="1;33m"
  local blue="1;34m"
  local purple="1;35m"
  local cyan="1;36m"
  local gray="0;37m"
  local white="$close"

  local text="$1"
  local color="$close"

  if [ "$#" -eq 2 ]; then
    text="$2"
    case "$1" in
      black | red | green | yellow | blue | purple | cyan | gray | white)
        eval color="\$$1"
        ;;
    esac
  fi

  printf "${open}${color}${text}${close}"
}

logging() {
  local color=
  local text="$2"

  case "$1" in
    TITLE)
      color=yellow
      ;;
    ERROR | WARN)
      color=red
      ;;
    INFO)
      color=blue
      ;;
    SUCCESS)
      color=green
      ;;
    *)
      text="$1"
  esac

  timestamp() {
    ink gray "["
    ink purple "$(date +%H:%M:%S)"
    ink gray "] "
  }

  timestamp; ink "$color" "$text"; echo
}

log_pass() {
  logging SUCCESS "$1"
}

log_fail() {
  logging ERROR "$1" 1>&2
}

log_info() {
  logging INFO "$1"
}

log_echo() {
  logging TITLE "$1"
}

e_newline() {
  printf "\n"
}

e_header() {
  printf " \033[37;1m%s\033[m\n" "$*"
}

e_done() {
  printf " \033[37;1m%s\033[m...\033[32mOK\033[m\n" "âœ” $*"
}
# }}}

dotfiles_download() {
  if [ -d "$CONFIG_ROOT" ]; then
    log_fail "$CONFIG_ROOT: already exists"
    git submodule update --init --recursive
    return
  fi

  e_newline && e_header "Downloading dotfiles..."

  if is_exists "git"; then
    git clone --recursive "$DOTFILES_GITHUB" "$CONFIG_ROOT"
  elif is_exists "curl" || is_exists "wget"; then
    local tarball="https://github.com/yuku/dotfiles/archive/master.tar.gz"
    if is_exists "curl"; then
      curl -L "$tarball"
    else
      wget -O - "$tarball"
    fi | tar xvz
    if [ ! -d dotfiles-master ]; then
      log_fail "dotfiles-master: not found"
      exit 1
    fi
    command mv -f dotfiles-master "$CONFIG_ROOT"
  else
    log_fail "git, curl or wget required"
    exit 1
  fi

  e_newline && e_done "Download"
}

dotfiles_deploy() {
  e_newline && e_header "Deploying dotfiles..."

  if [ ! -d $CONFIG_ROOT ]; then
    log_fail "$CONFIG_ROOT: not found"
    exit 1
  fi

  cd "$CONFIG_ROOT"
  make deploy &&
  e_newline && e_done "Deploy"
}

dotfiles_initialize() {
  e_newline
  e_header "Initializing dotfiles..."

  if [ -f Makefile ]; then
    make init &&
    e_newline && e_done "Initilize"
  else
    log_fail "Makefile: not found"
    exit 1
  fi
}

dotfiles_install() {
  # 1. Download yuku/dotfiles repository to $CONFIG_ROOT.
  dotfiles_download

  # 2. Deploy dotfiles to my home directory.
  dotfiles_deploy &&

  # 3. Execute all sh files in etc/init directory.
  dotfiles_initialize
}

if [ -z "${CONFIG_ROOT:-}" ]; then
  CONFIG_ROOT="$HOME/dev/src/github.com/yuku/config"; export CONFIG_ROOT
fi
DOTFILES_GITHUB="git@github.com:yuku/config.git"; export DOTFILES_GITHUB

main() {
  dotfiles_install
}

main
